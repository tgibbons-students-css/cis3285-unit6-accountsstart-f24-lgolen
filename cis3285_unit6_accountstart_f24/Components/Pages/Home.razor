@page "/Home"
@rendermode InteractiveServer
@using Services;
@using Domain;

<h1>Wells Fargo Account Creator</h1>

<label for="accountName">New Account Name:</label>
<input type="text" id="accountName" name="accountName" @bind="newAccountName">
<br>
<button class="btn btn-primary" @onclick="btnAddAccount_Click">Add Account</button>

<br>
<br>
<label for="accountList">Current Accounts:</label>
<select name="accountList" id="accountList" class="form-control" @bind="selectedAccountName" @bind:event="onchange">
    @if (accountList != null && accountList.Count > 0)
    {
        <option value="NoAccountSelected">Select an account</option>

        @foreach (string accName in accountList)
        {
            <option value="@accName">@accName</option>
        }
    }
    else
    {
        <option value="NoAccountSelected">No accounts available</option>
    }
</select>
<br>
<br>
<p>Account Balance: @strAccountBalance</p>

<label for="depositAmount">Deposit Amount:</label>
<input type="text" id="depositAmount" name="depositAmount" @bind="strDepositAmount">
<button class="btn btn-primary" @onclick="btnDeposit_Click">Deposit</button>
<br>

<label for="withdrawAmount">Withdraw Amount:</label>
<input type="text" id="withdrawAmount" name="withdrawAmount" @bind="strWithdrawAmount">
<button class="btn btn-primary" @onclick="btnWithdraw_Click">Withdraw</button>
<br>

@code {

    private string newAccountName;              // name in the new account textbox
    private string selectedAccountName;         // account name selected from Acccout dropdown
    private string strAccountBalance;           // display for the account balance
    private decimal accountBalance = 0.00m;     // numeric value of account balance
    private string strDepositAmount;            // amount to deposit as a string
    private string strWithdrawAmount;           // amount to withdraw as a string

    private List<string> accountList = new List<string>();
    AccountService acctService = new AccountService();

    protected override void OnInitialized()
    {
        // Initialize account list if needed
        accountList = acctService.GetAllAccounts();
    }

    private void updateAccount()
    {
        if (string.Compare(selectedAccountName, "NoAccountSelected") != 0)
        {
            accountBalance = acctService.GetAccountBalance(selectedAccountName);
            strAccountBalance = accountBalance.ToString();
        }
        else
        {
            strAccountBalance = "No account selected";
        }
    }

    private void btnDeposit_Click()
    {
        decimal amount = decimal.Parse(strDepositAmount);
        acctService.Deposit(selectedAccountName, amount);
        accountBalance = acctService.GetAccountBalance(selectedAccountName);
        strAccountBalance = accountBalance.ToString();
        StateHasChanged();
    }

    private void btnWithdraw_Click()
    {
        decimal amount = decimal.Parse(strWithdrawAmount);
        acctService.Withdrawal(selectedAccountName, amount);
        accountBalance = acctService.GetAccountBalance(selectedAccountName);
        strAccountBalance = accountBalance.ToString();
        StateHasChanged();
    }

    private void btnAddAccount_Click()
    {
        Console.WriteLine("Add Account button clicked."); // For debugging

        if (newAccountName is null) {
            Console.WriteLine("Null account name detected. Please enter an account name.");
            return;
        }
        string accountName = newAccountName;
        acctService.CreateAccount(accountName, AccountType.Silver);

        accountList = acctService.GetAllAccounts();

        newAccountName = string.Empty; // Clear the input field
        StateHasChanged();

    }
}
